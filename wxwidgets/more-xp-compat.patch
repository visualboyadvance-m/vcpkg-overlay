--- a/src/msw/uilocale.cpp	1900-01-00 00:00:00 +0000
+++ b/src/msw/uilocale.cpp	1900-01-00 00:00:00 +0000
@@ -145,20 +145,38 @@
 
 WXDLLIMPEXP_BASE wxString wxGetMSWDateTimeFormat(wxLocaleInfo index)
 {
-    wxString format;
-    wxString localeName = wxUILocale::GetCurrent().GetName();
-    if (localeName.IsSameAs("C"))
-    {
-        localeName = "en-US";
+    LCTYPE lctype = wxGetLCTYPEFormatFromLocalInfo(index);
+
+    if (!lctype) {
+        return "";
     }
 
-    const wchar_t* name = localeName.wc_str();
-    LCTYPE lctype = wxGetLCTYPEFormatFromLocalInfo(index);
-    if (lctype != 0)
-    {
-        wchar_t buf[256];
-        if (::GetLocaleInfo(name, lctype, buf, WXSIZEOF(buf)))
+    wxDynamicLibrary kernel32(wxT("kernel32.dll"), wxDL_VERBATIM | wxDL_DEFAULT);
+    wchar_t buf[256];
+    wxString format;
+
+    if (wxGetWinVersion() >= wxWinVersion_Vista) {
+        wxString localeName = wxUILocale::GetCurrent().GetName();
+        if (localeName.IsSameAs("C"))
+        {
+            localeName = "en-US";
+        }
+
+        const wchar_t* name = localeName.wc_str();
+        int (WINAPI *pfnGetLocaleInfoEx)(LPCWSTR, LCTYPE, LPWSTR, int) =
+            (int (*)(LPCWSTR, LCTYPE, LPWSTR, int))kernel32.GetSymbol(wxT("GetLocaleInfoEx"));
+
+        if (pfnGetLocaleInfoEx(name, lctype, buf, WXSIZEOF(buf)))
+        {
+            format = buf;
+        }
+        else
         {
+            wxLogLastError(wxT("GetLocaleInfoEx"));
+        }
+    } else { // XP
+        LCID localeId = ::GetUserDefaultLCID();
+        if (::GetLocaleInfo(localeId, lctype, buf, WXSIZEOF(buf))) {
             format = buf;
         }
         else
@@ -166,6 +184,7 @@
             wxLogLastError(wxT("GetLocaleInfo"));
         }
     }
+
     return format;
 }
 
@@ -395,8 +414,14 @@
     {
         // Getting the locale name seems to be the simplest way to see if it's
         // really supported: unknown locale result in an error here.
-        if ( !::GetLocaleInfo(name, LOCALE_SNAME, nullptr, 0) )
-            return nullptr;
+        if (wxGetWinVersion() >= wxWinVersion_Vista) {
+            wxDynamicLibrary kernel32(wxT("kernel32.dll"), wxDL_VERBATIM | wxDL_DEFAULT);
+            int (WINAPI *pfnGetLocaleInfoEx)(LPCWSTR, LCTYPE, LPWSTR, int) =
+                (int (*)(LPCWSTR, LCTYPE, LPWSTR, int))kernel32.GetSymbol(wxT("GetLocaleInfoEx"));
+
+            if (!pfnGetLocaleInfoEx(name, LOCALE_SNAME, nullptr, 0))
+                return nullptr;
+        }
 
         // Unfortunately under Windows 10 the call above only fails if the given
         // locale name is not a valid BCP 47 identifier. For example,
@@ -418,8 +443,11 @@
             // discouraged by Microsoft (the constant is not even defined in a
             // Windows header file). However, for now constructed locales will
             // be rejected here.
+            wxDynamicLibrary kernel32(wxT("kernel32.dll"), wxDL_VERBATIM | wxDL_DEFAULT);
+            int (WINAPI *pfnGetLocaleInfoEx)(LPCWSTR, LCTYPE, LPWSTR, int) =
+                (int (*)(LPCWSTR, LCTYPE, LPWSTR, int))kernel32.GetSymbol(wxT("GetLocaleInfoEx"));
             int isConstructed = 0;
-            if (!::GetLocaleInfo
+            if (!pfnGetLocaleInfoEx
                  (
                     name,
                     LOCALE_ICONSTRUCTEDLOCALE | LOCALE_RETURN_NUMBER,
@@ -648,13 +676,35 @@
         if ( flags & wxCompare_CaseInsensitive )
             dwFlags |= NORM_IGNORECASE;
 
-        const int ret = ::CompareString
-            (
-                m_name,
-                dwFlags,
-                lhs.wc_str(), -1,
-                rhs.wc_str(), -1
-            );
+        int ret;
+        if (wxGetWinVersion() >= wxWinVersion_Vista)
+        {
+            wxDynamicLibrary kernel32(wxT("kernel32.dll"), wxDL_VERBATIM | wxDL_DEFAULT);
+            int (WINAPI *pfnCompareStringEx)(LPCWSTR, DWORD, LPCWCH, int, LPCWCH, int, LPNLSVERSIONINFO, LPVOID, LPARAM) =
+                (int (*)(LPCWSTR, DWORD, LPCWCH, int, LPCWCH, int, LPNLSVERSIONINFO, LPVOID, LPARAM))kernel32.GetSymbol(wxT("CompareStringEx"));
+
+            ret = pfnCompareStringEx
+                (
+                    m_name,
+                    dwFlags,
+                    lhs.wc_str(), -1,
+                    rhs.wc_str(), -1,
+                    nullptr,
+                    wxRESERVED_PARAM,
+                    wxRESERVED_PARAM
+                );
+        }
+        else // XP
+        {
+            LCID localeId = ::GetUserDefaultLCID();
+            ret = ::CompareString
+                (
+                    localeId,
+                    dwFlags,
+                    lhs.wc_str(), -1,
+                    rhs.wc_str(), -1
+                );
+        }
 
         switch ( ret )
         {
@@ -682,10 +732,27 @@
     wxString DoGetInfo(LCTYPE lctype) const
     {
         wchar_t buf[256];
-        if ( !::GetLocaleInfo(m_name, lctype, buf, WXSIZEOF(buf)) )
+
+        if (wxGetWinVersion() >= wxWinVersion_Vista)
         {
-            wxLogLastError(wxT("GetLocaleInfo"));
-            return wxString();
+            wxDynamicLibrary kernel32(wxT("kernel32.dll"), wxDL_VERBATIM | wxDL_DEFAULT);
+            int (WINAPI *pfnGetLocaleInfoEx)(LPCWSTR, LCTYPE, LPWSTR, int) =
+                (int (*)(LPCWSTR, LCTYPE, LPWSTR, int))kernel32.GetSymbol(wxT("GetLocaleInfoEx"));
+
+            if ( !pfnGetLocaleInfoEx(m_name, lctype, buf, WXSIZEOF(buf)) )
+            {
+                wxLogLastError(wxT("GetLocaleInfo"));
+                return wxString();
+            }
+        }
+        else // XP
+        {
+            LCID localeId = ::GetUserDefaultLCID();
+            if (!::GetLocaleInfo(localeId, lctype, buf, WXSIZEOF(buf)))
+            {
+                wxLogLastError(wxT("GetLocaleInfo"));
+                return wxString();
+            }
         }
 
         return buf;
